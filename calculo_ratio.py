import streamlit as st
import math
from decimal import Decimal

# ---------------------------------------------------------------------------------------------
# FUNCIONES AUXILIARES
# ---------------------------------------------------------------------------------------------

def calcular_equivalentes_jornada_completa(horas_semanales):
    """
    Convierte las horas semanales en equivalentes a jornada completa.
    """
    HORAS_ANUALES_JORNADA_COMPLETA = 1772
    SEMANAS_AL_ANO = 52.14
    horas_anuales = horas_semanales * SEMANAS_AL_ANO
    return horas_anuales / HORAS_ANUALES_JORNADA_COMPLETA

def calcular_horas(plazas):
    """
    Calcula las HORAS SEMANALES necesarias para Fisioterapia y Terapia Ocupacional.

    - Para hasta 50 residentes: 4 horas diarias (lunes a viernes) = 20 h/semana.
    - A partir de ah√≠, por cada 25 residentes adicionales (o fracci√≥n),
      se a√±aden 2 horas diarias (10 h/semana). Permite incrementos parciales.
    """
    dias_semana = 5
    base_horas_diarias = 4.0  # 4 horas/d√≠a para 1-50 residentes

    if plazas <= 50:
        horas_diarias = base_horas_diarias
    else:
        plazas_adicionales = plazas - 50
        incrementos_enteros = plazas_adicionales // 25
        resto = plazas_adicionales % 25
        horas_adicionales_enteras = incrementos_enteros * 2.0
        horas_adicionales_parciales = (resto / 25.0) * 2.0
        horas_diarias = base_horas_diarias + horas_adicionales_enteras + horas_adicionales_parciales

    horas_semanales = horas_diarias * dias_semana
    return horas_semanales

def formatear_ratio(valor):
    """
    Formatea un n√∫mero a dos decimales y usando coma como separador decimal.
    Maneja tambi√©n infinito, NaN o None.
    """
    if valor is None or not math.isfinite(valor):
        return "Valor no v√°lido"
    return f"{Decimal(str(valor)).quantize(Decimal('0.00'))}".replace('.', ',')

# ---------------------------------------------------------------------------------------------
# INTERFAZ PRINCIPAL
# ---------------------------------------------------------------------------------------------

st.title("√Ådrika - üìä C√°lculo de RATIO de personal - CAM")

# NUEVO: Seleccionamos el modo de c√°lculo
modo_calculo = st.selectbox(
    "Seleccione el tipo de c√°lculo que desea realizar:",
    [
        "C√°lculo RATIO CAM AM atenci√≥n residencial", 
        "C√°lculo RATIO CAM Orden 2680-2024 Acreditaci√≥n de centros"
    ]
)

# Secci√≥n: Ocupaci√≥n de la Residencia
st.subheader("üè• Ocupaci√≥n de la Residencia")
ocupacion = st.number_input(
    "Ingrese el n√∫mero de residentes (plazas ocupadas o autorizadas)",
    min_value=0,  # Por defecto 0
    value=0,
    step=1,
    format="%d"
)

# ---------------------------------------------------------------------------------------------
# MODO 1: C√ÅLCULO RATIO CAM AM ATENCI√ìN RESIDENCIAL (l√≥gica original)
# ---------------------------------------------------------------------------------------------
if modo_calculo == "C√°lculo RATIO CAM AM atenci√≥n residencial":
    st.write("**Se encuentra en el modo de c√°lculo seg√∫n normativa CAM AM (Atenci√≥n Residencial).**")

    # Categor√≠as de personal
    directas = [
        "M√©dico",
        "ATS/DUE (Enfermer√≠a)",
        "Gerocultor",
        "Fisioterapeuta",
        "Terapeuta Ocupacional",
        "Trabajador Social",
        "Psic√≥logo/a",
        "Animador sociocultural / TASOC",
        "Director/a"
    ]
    no_directas = ["Limpieza", "Cocina", "Mantenimiento"]

    datos_directas = {}
    datos_no_directas = {}

    # Horas de Atenci√≥n Directa
    st.subheader("üîπ Horas semanales de Atenci√≥n Directa")
    for categoria in directas:
        datos_directas[categoria] = st.number_input(
            f"{categoria} (horas/semana)",
            min_value=0.0,
            format="%.2f",
            key=f"directas_{categoria}"
        )

    # Horas de Atenci√≥n No Directa
    st.subheader("üîπ Horas semanales de Atenci√≥n No Directa")
    for categoria in no_directas:
        datos_no_directas[categoria] = st.number_input(
            f"{categoria} (horas/semana)",
            min_value=0.0,
            format="%.2f",
            key=f"nodirectas_{categoria}"
        )

    # Bot√≥n para realizar el c√°lculo
    if st.button("üìå Calcular Ratio (CAM AM)"):

        # 1) Verificar si se ha introducido la ocupaci√≥n
        if ocupacion == 0:
            st.error("‚ö†Ô∏è Debe introducir el n√∫mero de residentes (mayor que 0).")
            st.stop()

        # 2) Calcular EJC totales de Atenci√≥n Directa y No Directa
        total_eq_directa = sum(calcular_equivalentes_jornada_completa(hs) for hs in datos_directas.values())
        total_eq_no_directa = sum(calcular_equivalentes_jornada_completa(hs) for hs in datos_no_directas.values())

        # 3) Calcular los ratios por cada 100 residentes
        ratio_directa = (total_eq_directa / ocupacion) * 100
        ratio_no_directa = (total_eq_no_directa / ocupacion) * 100

        st.subheader("üìä Resultados del C√°lculo de Ratios")
        ratio_directa_color = "green" if ratio_directa / 100 >= 0.47 else "red"
        ratio_no_directa_color = "green" if ratio_no_directa / 100 >= 0.15 else "red"

        st.markdown(f"""
        <p style='font-size:18px; color:{ratio_directa_color};'>
            üîπ <b>Atenci√≥n Directa</b> ‚Üí Total EQ: <b>{total_eq_directa:.2f}</b> | 
            Ratio: <b>{ratio_directa:.2f}</b> por cada 100 residentes
        </p>
        """, unsafe_allow_html=True)

        st.markdown(f"""
        <p style='font-size:18px; color:{ratio_no_directa_color};'>
            üîπ <b>Atenci√≥n No Directa</b> ‚Üí Total EQ: <b>{total_eq_no_directa:.2f}</b> | 
            Ratio: <b>{ratio_no_directa:.2f}</b> por cada 100 residentes
        </p>
        """, unsafe_allow_html=True)

        # 4) Verificaci√≥n de cumplimiento global de ratios CAM
        cumple_directa = (ratio_directa / 100) >= 0.47
        cumple_no_directa = (ratio_no_directa / 100) >= 0.15

        eq_gerocultores = calcular_equivalentes_jornada_completa(datos_directas.get("Gerocultor", 0))
        ratio_gerocultores = eq_gerocultores / ocupacion
        cumple_gerocultores = ratio_gerocultores >= 0.33

        st.subheader("‚úÖ Verificaci√≥n de cumplimiento con la CAM")
        st.markdown(f"""
        <p style='font-size:18px; color:{"green" if cumple_directa else "red"};'>
            - <b>Atenci√≥n Directa</b>: {"‚úÖ CUMPLE" if cumple_directa else "‚ùå NO CUMPLE"} 
            (M√≠nimo 0,47). Ratio: <b>{ratio_directa/100:.2f}</b>
        </p>
        """, unsafe_allow_html=True)

        st.markdown(f"""
        <p style='font-size:18px; color:{"green" if cumple_no_directa else "red"};'>
            - <b>Atenci√≥n No Directa</b>: {"‚úÖ CUMPLE" if cumple_no_directa else "‚ùå NO CUMPLE"} 
            (M√≠nimo 0,15). Ratio: <b>{ratio_no_directa/100:.2f}</b>
        </p>
        """, unsafe_allow_html=True)

        st.markdown(f"""
        <p style='font-size:18px; color:{"green" if cumple_gerocultores else "red"};'>
            - <b>Gerocultores</b>: {"‚úÖ CUMPLE" if cumple_gerocultores else "‚ùå NO CUMPLE"} 
            (M√≠nimo 0,33). Ratio: <b>{ratio_gerocultores:.2f}</b>
        </p>
        """, unsafe_allow_html=True)

        # 5) C√°lculo de horas Fisioterapia y Terapia Ocupacional
        horas_necesarias_terapia = calcular_horas(ocupacion)
        horas_fisio_usuario = datos_directas.get("Fisioterapeuta", 0)
        horas_to_usuario = datos_directas.get("Terapeuta Ocupacional", 0)

        cumple_fisio = (horas_fisio_usuario >= horas_necesarias_terapia)
        cumple_to = (horas_to_usuario >= horas_necesarias_terapia)

        st.subheader("ü©∫ C√°lculo de horas Fisioterapia y Terapia Ocupacional")
        st.write(f"**Plazas ocupadas:** {ocupacion} residentes")

        texto_fisio = (
            f"<p style='font-size:16px; color:{'green' if cumple_fisio else 'red'};'>"
            f"üîπ <b>Fisioterapeuta</b>: Horas requeridas/semana: "
            f"<b>{formatear_ratio(horas_necesarias_terapia)}</b>. "
            f"Horas introducidas: <b>{formatear_ratio(horas_fisio_usuario)}</b> ‚Üí "
            f"{'‚úÖ CUMPLE' if cumple_fisio else '‚ùå NO CUMPLE'}"
            f"</p>"
        )
        st.markdown(texto_fisio, unsafe_allow_html=True)

        texto_to = (
            f"<p style='font-size:16px; color:{'green' if cumple_to else 'red'};'>"
            f"üîπ <b>Terapeuta Ocupacional</b>: Horas requeridas/semana: "
            f"<b>{formatear_ratio(horas_necesarias_terapia)}</b>. "
            f"Horas introducidas: <b>{formatear_ratio(horas_to_usuario)}</b> ‚Üí "
            f"{'‚úÖ CUMPLE' if cumple_to else '‚ùå NO CUMPLE'}"
            f"</p>"
        )
        st.markdown(texto_to, unsafe_allow_html=True)

        # 6) Otras comprobaciones espec√≠ficas
        # - Trabajador Social: obligado a tener alguna hora (>0).
        horas_ts = datos_directas.get("Trabajador Social", 0)
        cumple_ts = (horas_ts > 0)

        # - M√©dico: al menos 5h/sem (presencia L-V).
        horas_medico = datos_directas.get("M√©dico", 0)
        cumple_medico = (horas_medico >= 5)

        # - Enfermer√≠a: m√≠nimo 168h/sem para cubrir 24h/d√≠a x 7 d√≠as.
        horas_enfermeria = datos_directas.get("ATS/DUE (Enfermer√≠a)", 0)
        cumple_enfermeria = (horas_enfermeria >= 168)

        st.subheader("üîé Verificaci√≥n de requisitos espec√≠ficos")
        # Trabajador Social
        st.markdown(f"""
        <p style='font-size:16px; color:{"green" if cumple_ts else "red"};'>
            üîπ <b>Trabajador Social</b>: Contrataci√≥n obligatoria.
            Horas: <b>{formatear_ratio(horas_ts)}</b> ‚Üí 
            {"‚úÖ CUMPLE" if cumple_ts else "‚ùå NO CUMPLE (debe ser > 0)"}
        </p>
        """, unsafe_allow_html=True)

        # M√©dico
        st.markdown(f"""
        <p style='font-size:16px; color:{"green" if cumple_medico else "red"};'>
            üîπ <b>M√©dico</b>: Presencia de lunes a viernes (‚â•5h/sem).
            Horas: <b>{formatear_ratio(horas_medico)}</b> ‚Üí 
            {"‚úÖ CUMPLE (si hubo presencia L-V)" if cumple_medico else "‚ùå NO CUMPLE (debe ser ‚â• 5h)"}
        </p>
        """, unsafe_allow_html=True)

        # Enfermer√≠a
        st.markdown(f"""
        <p style='font-size:16px; color:{"green" if cumple_enfermeria else "red"};'>
            üîπ <b>Enfermer√≠a (ATS/DUE)</b>: 
            Presencia 24h/d√≠a, 7 d√≠as/semana (‚â•168h/sem).
            Horas: <b>{formatear_ratio(horas_enfermeria)}</b> ‚Üí 
            {"‚úÖ CUMPLE (24h/d√≠a cubiertas)" if cumple_enfermeria else "‚ùå NO CUMPLE (debe ser ‚â• 168h)"}
        </p>
        """, unsafe_allow_html=True)

        # 7) Informaci√≥n adicional final
        st.subheader("‚ÑπÔ∏è Informaci√≥n sobre las ratios")
        st.write("- **Atenci√≥n Directa**: M√≠nimo de 0,47 (EJC) por residente.")
        st.write("- **Gerocultores**: M√≠nimo de 0,33 (EJC) por residente.")
        st.write("- **Fisioterapeuta / Terapeuta Ocupacional**: 4 horas/d√≠a (20h/sem) para 1-50 plazas, "
                 "y +2h/d√≠a (10h/sem) por cada 25 plazas o fracci√≥n.")
        st.write("- **Trabajador Social**: Contrataci√≥n obligatoria (sin horas m√≠nimas, pero > 0h).")
        st.write("- **M√©dico**: Presencia f√≠sica L-V (indicativo ‚â•5h/sem).")
        st.write("- **Enfermer√≠a**: Presencia 24h/d√≠a, 7 d√≠as/semana (‚â•168h/sem).")
        st.write("- **Psic√≥logo/a y Animador Sociocultural**: Servicios opcionales.")
        st.write("- **Atenci√≥n No Directa**: M√≠nimo de 0,15 (EJC) por residente.")


# ---------------------------------------------------------------------------------------------
# MODO 2: C√ÅLCULO RATIO CAM Orden 2680-2024 Acreditaci√≥n de centros (solo atenci√≥n directa)
# ---------------------------------------------------------------------------------------------
else:
    st.write("**Se encuentra en el modo de c√°lculo seg√∫n la Orden 2680-2024 (Acreditaci√≥n de centros).**")
    st.write("Para residencias de personas mayores, la ratio m√≠nima de personal de atenci√≥n directa es:")
    st.markdown("- **0,45** si la residencia tiene m√°s de 50 plazas autorizadas.\n"
                "- **0,37** si la residencia tiene 50 o menos plazas autorizadas.")

    # Solo pedimos horas de Atenci√≥n Directa
    directas = [
        "M√©dico",
        "ATS/DUE (Enfermer√≠a)",
        "Gerocultor",
        "Fisioterapeuta",
        "Terapeuta Ocupacional",
        "Trabajador Social",
        "Psic√≥logo/a",
        "Animador sociocultural / TASOC",
        "Director/a"
    ]

    datos_directas = {}

    st.subheader("üîπ Horas semanales de Atenci√≥n Directa (Orden 2680-2024)")
    for categoria in directas:
        datos_directas[categoria] = st.number_input(
            f"{categoria} (horas/semana)",
            min_value=0.0,
            format="%.2f",
            key=f"directas_2_{categoria}"
        )

    if st.button("üìå Calcular Ratio (Orden 2680-2024)"):

        if ocupacion == 0:
            st.error("‚ö†Ô∏è Debe introducir el n√∫mero de residentes (mayor que 0).")
            st.stop()

        # Calculamos la suma total de EJC en atenci√≥n directa
        total_eq_directa = sum(calcular_equivalentes_jornada_completa(hs) for hs in datos_directas.values())
        ratio_directa = total_eq_directa / ocupacion  # EJC por residente

        # Determinamos la ratio m√≠nima a aplicar (‚â•0,45 si >50, sino ‚â•0,37)
        if ocupacion > 50:
            ratio_minima = 0.45
        else:
            ratio_minima = 0.37

        st.subheader("üìä Resultado del C√°lculo de Ratio (Atenci√≥n Directa)")
        st.write(f"**Total de EJC de Atenci√≥n Directa**: {total_eq_directa:.2f}")
        st.write(f"**Ratio de Atenci√≥n Directa** (EJC por residente): {ratio_directa:.2f}")

        cumple_ratio = ratio_directa >= ratio_minima
        color_ratio = "green" if cumple_ratio else "red"

        st.markdown(f"""
        <p style='font-size:18px; color:{color_ratio};'>
            - Ratio m√≠nima exigida: <b>{ratio_minima:.2f}</b><br>
            - El centro {"<b>CUMPLE ‚úÖ</b>" if cumple_ratio else "<b>NO CUMPLE ‚ùå</b>"}
        </p>
        """, unsafe_allow_html=True)

        st.info(
            "Esta verificaci√≥n se basa √∫nicamente en la ratio global de personal de atenci√≥n directa. "
            "Pueden existir otros requisitos cualitativos (distribuci√≥n de categor√≠as, turnos, etc.) "
            "contemplados en la Orden 2680-2024."
        )
